digraph G {
00[label="compilationUnit\n packageproject.unittests;classInner1{longa[];floatb[][];publicInner1(intdim1,intdim2,intdim3){a=newlong[dim1];b=newfloat[dim2][dim3];initalize(dim1,dim2,dim3);}voidinitalize(intdim1,intdim2,intdim3){for(inti=0;i<dim1;i++){a[i]=i;}for(intj=0;j<dim2;j++){for(intk=0;k<dim3;k++){b[j][k]=j+k;}}}}classInner2{intc[][]=newint[3][3];doubled[]=newdouble[4];publicInner2(intdim1,intdim2,intdim3){c=newint[dim1][dim2];d=newdouble[dim3];init(dim1,dim2,dim3);}voidinit(intdim1,intdim2,intdim3){for(inti=0;i<dim1;i++){for(intj=0;j<dim2;j++){c[i][j]=i+j;}}for(inti=0;i<dim3;i++){d[i]=i;}}}classArrayTypeCheck{publicstaticvoidmain(String[]args){Inner1obj1=newInner1(3,4,5);Inner2obj2=newInner2(1,2,3);floata=obj1.b[2][2];intb[]=newint[2];b[1]=obj2.c[0][1];System.out.println(\"a: \"+a+\" b[0]: \"+b[0]+\" b[1]: \"+b[1]);}}<EOF> "]
11[label="packageDeclaration\n packageproject.unittests; "]
12[label="normalClassDeclaration\n classInner1{longa[];floatb[][];publicInner1(intdim1,intdim2,intdim3){a=newlong[dim1];b=newfloat[dim2][dim3];initalize(dim1,dim2,dim3);}voidinitalize(intdim1,intdim2,intdim3){for(inti=0;i<dim1;i++){a[i]=i;}for(intj=0;j<dim2;j++){for(intk=0;k<dim3;k++){b[j][k]=j+k;}}}} "]
23[label="classBody\n {longa[];floatb[][];publicInner1(intdim1,intdim2,intdim3){a=newlong[dim1];b=newfloat[dim2][dim3];initalize(dim1,dim2,dim3);}voidinitalize(intdim1,intdim2,intdim3){for(inti=0;i<dim1;i++){a[i]=i;}for(intj=0;j<dim2;j++){for(intk=0;k<dim3;k++){b[j][k]=j+k;}}}} "]
34[label="fieldDeclaration\n longa[]; "]
45[label="integralType\n long "]
46[label="variableDeclaratorId\n a[] "]
57[label="dims\n [] "]
38[label="fieldDeclaration\n floatb[][]; "]
49[label="floatingPointType\n float "]
410[label="variableDeclaratorId\n b[][] "]
511[label="dims\n [][] "]
312[label="constructorDeclaration\n publicInner1(intdim1,intdim2,intdim3){a=newlong[dim1];b=newfloat[dim2][dim3];initalize(dim1,dim2,dim3);} "]
413[label="constructorModifier\n public "]
414[label="constructorDeclarator\n Inner1(intdim1,intdim2,intdim3) "]
515[label="simpleTypeName\n Inner1 "]
516[label="formalParameterList\n intdim1,intdim2,intdim3 "]
617[label="formalParameters\n intdim1,intdim2 "]
718[label="formalParameter\n intdim1 "]
819[label="integralType\n int "]
820[label="variableDeclaratorId\n dim1 "]
721[label="formalParameter\n intdim2 "]
822[label="integralType\n int "]
823[label="variableDeclaratorId\n dim2 "]
624[label="formalParameter\n intdim3 "]
725[label="integralType\n int "]
726[label="variableDeclaratorId\n dim3 "]
427[label="constructorBody\n {a=newlong[dim1];b=newfloat[dim2][dim3];initalize(dim1,dim2,dim3);} "]
528[label="blockStatements\n a=newlong[dim1];b=newfloat[dim2][dim3];initalize(dim1,dim2,dim3); "]
629[label="expressionStatement\n a=newlong[dim1]; "]
730[label="assignment\n a=newlong[dim1] "]
831[label="expressionName\n a "]
832[label="assignmentOperator\n = "]
833[label="arrayCreationExpression\n newlong[dim1] "]
934[label="integralType\n long "]
935[label="dimExpr\n [dim1] "]
1036[label="expressionName\n dim1 "]
637[label="expressionStatement\n b=newfloat[dim2][dim3]; "]
738[label="assignment\n b=newfloat[dim2][dim3] "]
839[label="expressionName\n b "]
840[label="assignmentOperator\n = "]
841[label="arrayCreationExpression\n newfloat[dim2][dim3] "]
942[label="floatingPointType\n float "]
943[label="dimExprs\n [dim2][dim3] "]
1044[label="dimExpr\n [dim2] "]
1145[label="expressionName\n dim2 "]
1046[label="dimExpr\n [dim3] "]
1147[label="expressionName\n dim3 "]
648[label="expressionStatement\n initalize(dim1,dim2,dim3); "]
749[label="methodInvocation\n initalize(dim1,dim2,dim3) "]
850[label="methodName\n initalize "]
851[label="argumentList\n dim1,dim2,dim3 "]
952[label="expressionName\n dim1 "]
953[label="expressionName\n dim2 "]
954[label="expressionName\n dim3 "]
355[label="methodDeclaration\n voidinitalize(intdim1,intdim2,intdim3){for(inti=0;i<dim1;i++){a[i]=i;}for(intj=0;j<dim2;j++){for(intk=0;k<dim3;k++){b[j][k]=j+k;}}} "]
456[label="methodHeader\n voidinitalize(intdim1,intdim2,intdim3) "]
557[label="result\n void "]
558[label="methodDeclarator\n initalize(intdim1,intdim2,intdim3) "]
659[label="formalParameterList\n intdim1,intdim2,intdim3 "]
760[label="formalParameters\n intdim1,intdim2 "]
861[label="formalParameter\n intdim1 "]
962[label="integralType\n int "]
963[label="variableDeclaratorId\n dim1 "]
864[label="formalParameter\n intdim2 "]
965[label="integralType\n int "]
966[label="variableDeclaratorId\n dim2 "]
767[label="formalParameter\n intdim3 "]
868[label="integralType\n int "]
869[label="variableDeclaratorId\n dim3 "]
470[label="block\n {for(inti=0;i<dim1;i++){a[i]=i;}for(intj=0;j<dim2;j++){for(intk=0;k<dim3;k++){b[j][k]=j+k;}}} "]
571[label="blockStatements\n for(inti=0;i<dim1;i++){a[i]=i;}for(intj=0;j<dim2;j++){for(intk=0;k<dim3;k++){b[j][k]=j+k;}} "]
672[label="basicForStatement\n for(inti=0;i<dim1;i++){a[i]=i;} "]
773[label="localVariableDeclaration\n inti=0 "]
874[label="integralType\n int "]
875[label="variableDeclarator\n i=0 "]
976[label="variableDeclaratorId\n i "]
977[label="literal\n 0 "]
778[label="relationalExpression\n i<dim1 "]
879[label="expressionName\n i "]
880[label="expressionName\n dim1 "]
781[label="postIncrementExpression\n i++ "]
882[label="expressionName\n i "]
783[label="block\n {a[i]=i;} "]
884[label="expressionStatement\n a[i]=i; "]
985[label="assignment\n a[i]=i "]
1086[label="arrayAccess\n a[i] "]
1187[label="expressionName\n a "]
1188[label="expressionName\n i "]
1089[label="assignmentOperator\n = "]
1090[label="expressionName\n i "]
691[label="basicForStatement\n for(intj=0;j<dim2;j++){for(intk=0;k<dim3;k++){b[j][k]=j+k;}} "]
792[label="localVariableDeclaration\n intj=0 "]
893[label="integralType\n int "]
894[label="variableDeclarator\n j=0 "]
995[label="variableDeclaratorId\n j "]
996[label="literal\n 0 "]
797[label="relationalExpression\n j<dim2 "]
898[label="expressionName\n j "]
899[label="expressionName\n dim2 "]
7100[label="postIncrementExpression\n j++ "]
8101[label="expressionName\n j "]
7102[label="block\n {for(intk=0;k<dim3;k++){b[j][k]=j+k;}} "]
8103[label="basicForStatement\n for(intk=0;k<dim3;k++){b[j][k]=j+k;} "]
9104[label="localVariableDeclaration\n intk=0 "]
10105[label="integralType\n int "]
10106[label="variableDeclarator\n k=0 "]
11107[label="variableDeclaratorId\n k "]
11108[label="literal\n 0 "]
9109[label="relationalExpression\n k<dim3 "]
10110[label="expressionName\n k "]
10111[label="expressionName\n dim3 "]
9112[label="postIncrementExpression\n k++ "]
10113[label="expressionName\n k "]
9114[label="block\n {b[j][k]=j+k;} "]
10115[label="expressionStatement\n b[j][k]=j+k; "]
11116[label="assignment\n b[j][k]=j+k "]
12117[label="arrayAccess\n b[j][k] "]
13118[label="expressionName\n b "]
13119[label="expressionName\n j "]
13120[label="primaryNoNewArray_lf_arrayAccess\n  "]
13121[label="expressionName\n k "]
12122[label="assignmentOperator\n = "]
12123[label="additiveExpression\n j+k "]
13124[label="expressionName\n j "]
13125[label="expressionName\n k "]
1126[label="normalClassDeclaration\n classInner2{intc[][]=newint[3][3];doubled[]=newdouble[4];publicInner2(intdim1,intdim2,intdim3){c=newint[dim1][dim2];d=newdouble[dim3];init(dim1,dim2,dim3);}voidinit(intdim1,intdim2,intdim3){for(inti=0;i<dim1;i++){for(intj=0;j<dim2;j++){c[i][j]=i+j;}}for(inti=0;i<dim3;i++){d[i]=i;}}} "]
2127[label="classBody\n {intc[][]=newint[3][3];doubled[]=newdouble[4];publicInner2(intdim1,intdim2,intdim3){c=newint[dim1][dim2];d=newdouble[dim3];init(dim1,dim2,dim3);}voidinit(intdim1,intdim2,intdim3){for(inti=0;i<dim1;i++){for(intj=0;j<dim2;j++){c[i][j]=i+j;}}for(inti=0;i<dim3;i++){d[i]=i;}}} "]
3128[label="fieldDeclaration\n intc[][]=newint[3][3]; "]
4129[label="integralType\n int "]
4130[label="variableDeclarator\n c[][]=newint[3][3] "]
5131[label="variableDeclaratorId\n c[][] "]
6132[label="dims\n [][] "]
5133[label="arrayCreationExpression\n newint[3][3] "]
6134[label="integralType\n int "]
6135[label="dimExprs\n [3][3] "]
7136[label="dimExpr\n [3] "]
8137[label="literal\n 3 "]
7138[label="dimExpr\n [3] "]
8139[label="literal\n 3 "]
3140[label="fieldDeclaration\n doubled[]=newdouble[4]; "]
4141[label="floatingPointType\n double "]
4142[label="variableDeclarator\n d[]=newdouble[4] "]
5143[label="variableDeclaratorId\n d[] "]
6144[label="dims\n [] "]
5145[label="arrayCreationExpression\n newdouble[4] "]
6146[label="floatingPointType\n double "]
6147[label="dimExpr\n [4] "]
7148[label="literal\n 4 "]
3149[label="constructorDeclaration\n publicInner2(intdim1,intdim2,intdim3){c=newint[dim1][dim2];d=newdouble[dim3];init(dim1,dim2,dim3);} "]
4150[label="constructorModifier\n public "]
4151[label="constructorDeclarator\n Inner2(intdim1,intdim2,intdim3) "]
5152[label="simpleTypeName\n Inner2 "]
5153[label="formalParameterList\n intdim1,intdim2,intdim3 "]
6154[label="formalParameters\n intdim1,intdim2 "]
7155[label="formalParameter\n intdim1 "]
8156[label="integralType\n int "]
8157[label="variableDeclaratorId\n dim1 "]
7158[label="formalParameter\n intdim2 "]
8159[label="integralType\n int "]
8160[label="variableDeclaratorId\n dim2 "]
6161[label="formalParameter\n intdim3 "]
7162[label="integralType\n int "]
7163[label="variableDeclaratorId\n dim3 "]
4164[label="constructorBody\n {c=newint[dim1][dim2];d=newdouble[dim3];init(dim1,dim2,dim3);} "]
5165[label="blockStatements\n c=newint[dim1][dim2];d=newdouble[dim3];init(dim1,dim2,dim3); "]
6166[label="expressionStatement\n c=newint[dim1][dim2]; "]
7167[label="assignment\n c=newint[dim1][dim2] "]
8168[label="expressionName\n c "]
8169[label="assignmentOperator\n = "]
8170[label="arrayCreationExpression\n newint[dim1][dim2] "]
9171[label="integralType\n int "]
9172[label="dimExprs\n [dim1][dim2] "]
10173[label="dimExpr\n [dim1] "]
11174[label="expressionName\n dim1 "]
10175[label="dimExpr\n [dim2] "]
11176[label="expressionName\n dim2 "]
6177[label="expressionStatement\n d=newdouble[dim3]; "]
7178[label="assignment\n d=newdouble[dim3] "]
8179[label="expressionName\n d "]
8180[label="assignmentOperator\n = "]
8181[label="arrayCreationExpression\n newdouble[dim3] "]
9182[label="floatingPointType\n double "]
9183[label="dimExpr\n [dim3] "]
10184[label="expressionName\n dim3 "]
6185[label="expressionStatement\n init(dim1,dim2,dim3); "]
7186[label="methodInvocation\n init(dim1,dim2,dim3) "]
8187[label="methodName\n init "]
8188[label="argumentList\n dim1,dim2,dim3 "]
9189[label="expressionName\n dim1 "]
9190[label="expressionName\n dim2 "]
9191[label="expressionName\n dim3 "]
3192[label="methodDeclaration\n voidinit(intdim1,intdim2,intdim3){for(inti=0;i<dim1;i++){for(intj=0;j<dim2;j++){c[i][j]=i+j;}}for(inti=0;i<dim3;i++){d[i]=i;}} "]
4193[label="methodHeader\n voidinit(intdim1,intdim2,intdim3) "]
5194[label="result\n void "]
5195[label="methodDeclarator\n init(intdim1,intdim2,intdim3) "]
6196[label="formalParameterList\n intdim1,intdim2,intdim3 "]
7197[label="formalParameters\n intdim1,intdim2 "]
8198[label="formalParameter\n intdim1 "]
9199[label="integralType\n int "]
9200[label="variableDeclaratorId\n dim1 "]
8201[label="formalParameter\n intdim2 "]
9202[label="integralType\n int "]
9203[label="variableDeclaratorId\n dim2 "]
7204[label="formalParameter\n intdim3 "]
8205[label="integralType\n int "]
8206[label="variableDeclaratorId\n dim3 "]
4207[label="block\n {for(inti=0;i<dim1;i++){for(intj=0;j<dim2;j++){c[i][j]=i+j;}}for(inti=0;i<dim3;i++){d[i]=i;}} "]
5208[label="blockStatements\n for(inti=0;i<dim1;i++){for(intj=0;j<dim2;j++){c[i][j]=i+j;}}for(inti=0;i<dim3;i++){d[i]=i;} "]
6209[label="basicForStatement\n for(inti=0;i<dim1;i++){for(intj=0;j<dim2;j++){c[i][j]=i+j;}} "]
7210[label="localVariableDeclaration\n inti=0 "]
8211[label="integralType\n int "]
8212[label="variableDeclarator\n i=0 "]
9213[label="variableDeclaratorId\n i "]
9214[label="literal\n 0 "]
7215[label="relationalExpression\n i<dim1 "]
8216[label="expressionName\n i "]
8217[label="expressionName\n dim1 "]
7218[label="postIncrementExpression\n i++ "]
8219[label="expressionName\n i "]
7220[label="block\n {for(intj=0;j<dim2;j++){c[i][j]=i+j;}} "]
8221[label="basicForStatement\n for(intj=0;j<dim2;j++){c[i][j]=i+j;} "]
9222[label="localVariableDeclaration\n intj=0 "]
10223[label="integralType\n int "]
10224[label="variableDeclarator\n j=0 "]
11225[label="variableDeclaratorId\n j "]
11226[label="literal\n 0 "]
9227[label="relationalExpression\n j<dim2 "]
10228[label="expressionName\n j "]
10229[label="expressionName\n dim2 "]
9230[label="postIncrementExpression\n j++ "]
10231[label="expressionName\n j "]
9232[label="block\n {c[i][j]=i+j;} "]
10233[label="expressionStatement\n c[i][j]=i+j; "]
11234[label="assignment\n c[i][j]=i+j "]
12235[label="arrayAccess\n c[i][j] "]
13236[label="expressionName\n c "]
13237[label="expressionName\n i "]
13238[label="primaryNoNewArray_lf_arrayAccess\n  "]
13239[label="expressionName\n j "]
12240[label="assignmentOperator\n = "]
12241[label="additiveExpression\n i+j "]
13242[label="expressionName\n i "]
13243[label="expressionName\n j "]
6244[label="basicForStatement\n for(inti=0;i<dim3;i++){d[i]=i;} "]
7245[label="localVariableDeclaration\n inti=0 "]
8246[label="integralType\n int "]
8247[label="variableDeclarator\n i=0 "]
9248[label="variableDeclaratorId\n i "]
9249[label="literal\n 0 "]
7250[label="relationalExpression\n i<dim3 "]
8251[label="expressionName\n i "]
8252[label="expressionName\n dim3 "]
7253[label="postIncrementExpression\n i++ "]
8254[label="expressionName\n i "]
7255[label="block\n {d[i]=i;} "]
8256[label="expressionStatement\n d[i]=i; "]
9257[label="assignment\n d[i]=i "]
10258[label="arrayAccess\n d[i] "]
11259[label="expressionName\n d "]
11260[label="expressionName\n i "]
10261[label="assignmentOperator\n = "]
10262[label="expressionName\n i "]
1263[label="normalClassDeclaration\n classArrayTypeCheck{publicstaticvoidmain(String[]args){Inner1obj1=newInner1(3,4,5);Inner2obj2=newInner2(1,2,3);floata=obj1.b[2][2];intb[]=newint[2];b[1]=obj2.c[0][1];System.out.println(\"a: \"+a+\" b[0]: \"+b[0]+\" b[1]: \"+b[1]);}} "]
2264[label="classBody\n {publicstaticvoidmain(String[]args){Inner1obj1=newInner1(3,4,5);Inner2obj2=newInner2(1,2,3);floata=obj1.b[2][2];intb[]=newint[2];b[1]=obj2.c[0][1];System.out.println(\"a: \"+a+\" b[0]: \"+b[0]+\" b[1]: \"+b[1]);}} "]
3265[label="methodDeclaration\n publicstaticvoidmain(String[]args){Inner1obj1=newInner1(3,4,5);Inner2obj2=newInner2(1,2,3);floata=obj1.b[2][2];intb[]=newint[2];b[1]=obj2.c[0][1];System.out.println(\"a: \"+a+\" b[0]: \"+b[0]+\" b[1]: \"+b[1]);} "]
4266[label="methodModifier\n public "]
4267[label="methodModifier\n static "]
4268[label="methodHeader\n voidmain(String[]args) "]
5269[label="result\n void "]
5270[label="methodDeclarator\n main(String[]args) "]
6271[label="formalParameter\n String[]args "]
7272[label="unannArrayType\n String[] "]
8273[label="unannClassType_lfno_unannClassOrInterfaceType\n String "]
8274[label="dims\n [] "]
7275[label="variableDeclaratorId\n args "]
4276[label="block\n {Inner1obj1=newInner1(3,4,5);Inner2obj2=newInner2(1,2,3);floata=obj1.b[2][2];intb[]=newint[2];b[1]=obj2.c[0][1];System.out.println(\"a: \"+a+\" b[0]: \"+b[0]+\" b[1]: \"+b[1]);} "]
5277[label="blockStatements\n Inner1obj1=newInner1(3,4,5);Inner2obj2=newInner2(1,2,3);floata=obj1.b[2][2];intb[]=newint[2];b[1]=obj2.c[0][1];System.out.println(\"a: \"+a+\" b[0]: \"+b[0]+\" b[1]: \"+b[1]); "]
6278[label="localVariableDeclarationStatement\n Inner1obj1=newInner1(3,4,5); "]
7279[label="localVariableDeclaration\n Inner1obj1=newInner1(3,4,5) "]
8280[label="unannClassType_lfno_unannClassOrInterfaceType\n Inner1 "]
8281[label="variableDeclarator\n obj1=newInner1(3,4,5) "]
9282[label="variableDeclaratorId\n obj1 "]
9283[label="classInstanceCreationExpression_lfno_primary\n newInner1(3,4,5) "]
10284[label="argumentList\n 3,4,5 "]
11285[label="literal\n 3 "]
11286[label="literal\n 4 "]
11287[label="literal\n 5 "]
6288[label="localVariableDeclarationStatement\n Inner2obj2=newInner2(1,2,3); "]
7289[label="localVariableDeclaration\n Inner2obj2=newInner2(1,2,3) "]
8290[label="unannClassType_lfno_unannClassOrInterfaceType\n Inner2 "]
8291[label="variableDeclarator\n obj2=newInner2(1,2,3) "]
9292[label="variableDeclaratorId\n obj2 "]
9293[label="classInstanceCreationExpression_lfno_primary\n newInner2(1,2,3) "]
10294[label="argumentList\n 1,2,3 "]
11295[label="literal\n 1 "]
11296[label="literal\n 2 "]
11297[label="literal\n 3 "]
6298[label="localVariableDeclarationStatement\n floata=obj1.b[2][2]; "]
7299[label="localVariableDeclaration\n floata=obj1.b[2][2] "]
8300[label="floatingPointType\n float "]
8301[label="variableDeclarator\n a=obj1.b[2][2] "]
9302[label="variableDeclaratorId\n a "]
9303[label="arrayAccess_lfno_primary\n obj1.b[2][2] "]
10304[label="expressionName\n obj1.b "]
11305[label="ambiguousName\n obj1 "]
10306[label="literal\n 2 "]
10307[label="primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary\n  "]
10308[label="literal\n 2 "]
6309[label="localVariableDeclarationStatement\n intb[]=newint[2]; "]
7310[label="localVariableDeclaration\n intb[]=newint[2] "]
8311[label="integralType\n int "]
8312[label="variableDeclarator\n b[]=newint[2] "]
9313[label="variableDeclaratorId\n b[] "]
10314[label="dims\n [] "]
9315[label="arrayCreationExpression\n newint[2] "]
10316[label="integralType\n int "]
10317[label="dimExpr\n [2] "]
11318[label="literal\n 2 "]
6319[label="expressionStatement\n b[1]=obj2.c[0][1]; "]
7320[label="assignment\n b[1]=obj2.c[0][1] "]
8321[label="arrayAccess\n b[1] "]
9322[label="expressionName\n b "]
9323[label="literal\n 1 "]
8324[label="assignmentOperator\n = "]
8325[label="arrayAccess_lfno_primary\n obj2.c[0][1] "]
9326[label="expressionName\n obj2.c "]
10327[label="ambiguousName\n obj2 "]
9328[label="literal\n 0 "]
9329[label="primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary\n  "]
9330[label="literal\n 1 "]
6331[label="expressionStatement\n System.out.println(\"a: \"+a+\" b[0]: \"+b[0]+\" b[1]: \"+b[1]); "]
7332[label="methodInvocation\n System.out.println(\"a: \"+a+\" b[0]: \"+b[0]+\" b[1]: \"+b[1]) "]
8333[label="typeName\n System.out "]
9334[label="packageOrTypeName\n System "]
8335[label="additiveExpression\n \"a: \"+a+\" b[0]: \"+b[0]+\" b[1]: \"+b[1] "]
9336[label="additiveExpression\n \"a: \"+a+\" b[0]: \"+b[0]+\" b[1]: \" "]
10337[label="additiveExpression\n \"a: \"+a+\" b[0]: \"+b[0] "]
11338[label="additiveExpression\n \"a: \"+a+\" b[0]: \" "]
12339[label="additiveExpression\n \"a: \"+a "]
13340[label="literal\n \"a: \" "]
13341[label="expressionName\n a "]
12342[label="literal\n \" b[0]: \" "]
11343[label="arrayAccess_lfno_primary\n b[0] "]
12344[label="expressionName\n b "]
12345[label="literal\n 0 "]
10346[label="literal\n \" b[1]: \" "]
9347[label="arrayAccess_lfno_primary\n b[1] "]
10348[label="expressionName\n b "]
10349[label="literal\n 1 "]
00->11
00->12
12->23
23->34
34->45
34->46
46->57
23->38
38->49
38->410
410->511
23->312
312->413
312->414
414->515
414->516
516->617
617->718
718->819
718->820
617->721
721->822
721->823
516->624
624->725
624->726
312->427
427->528
528->629
629->730
730->831
730->832
730->833
833->934
833->935
935->1036
528->637
637->738
738->839
738->840
738->841
841->942
841->943
943->1044
1044->1145
943->1046
1046->1147
528->648
648->749
749->850
749->851
851->952
851->953
851->954
23->355
355->456
456->557
456->558
558->659
659->760
760->861
861->962
861->963
760->864
864->965
864->966
659->767
767->868
767->869
355->470
470->571
571->672
672->773
773->874
773->875
875->976
875->977
672->778
778->879
778->880
672->781
781->882
672->783
783->884
884->985
985->1086
1086->1187
1086->1188
985->1089
985->1090
571->691
691->792
792->893
792->894
894->995
894->996
691->797
797->898
797->899
691->7100
7100->8101
691->7102
7102->8103
8103->9104
9104->10105
9104->10106
10106->11107
10106->11108
8103->9109
9109->10110
9109->10111
8103->9112
9112->10113
8103->9114
9114->10115
10115->11116
11116->12117
12117->13118
12117->13119
12117->13120
12117->13121
11116->12122
11116->12123
12123->13124
12123->13125
00->1126
1126->2127
2127->3128
3128->4129
3128->4130
4130->5131
5131->6132
4130->5133
5133->6134
5133->6135
6135->7136
7136->8137
6135->7138
7138->8139
2127->3140
3140->4141
3140->4142
4142->5143
5143->6144
4142->5145
5145->6146
5145->6147
6147->7148
2127->3149
3149->4150
3149->4151
4151->5152
4151->5153
5153->6154
6154->7155
7155->8156
7155->8157
6154->7158
7158->8159
7158->8160
5153->6161
6161->7162
6161->7163
3149->4164
4164->5165
5165->6166
6166->7167
7167->8168
7167->8169
7167->8170
8170->9171
8170->9172
9172->10173
10173->11174
9172->10175
10175->11176
5165->6177
6177->7178
7178->8179
7178->8180
7178->8181
8181->9182
8181->9183
9183->10184
5165->6185
6185->7186
7186->8187
7186->8188
8188->9189
8188->9190
8188->9191
2127->3192
3192->4193
4193->5194
4193->5195
5195->6196
6196->7197
7197->8198
8198->9199
8198->9200
7197->8201
8201->9202
8201->9203
6196->7204
7204->8205
7204->8206
3192->4207
4207->5208
5208->6209
6209->7210
7210->8211
7210->8212
8212->9213
8212->9214
6209->7215
7215->8216
7215->8217
6209->7218
7218->8219
6209->7220
7220->8221
8221->9222
9222->10223
9222->10224
10224->11225
10224->11226
8221->9227
9227->10228
9227->10229
8221->9230
9230->10231
8221->9232
9232->10233
10233->11234
11234->12235
12235->13236
12235->13237
12235->13238
12235->13239
11234->12240
11234->12241
12241->13242
12241->13243
5208->6244
6244->7245
7245->8246
7245->8247
8247->9248
8247->9249
6244->7250
7250->8251
7250->8252
6244->7253
7253->8254
6244->7255
7255->8256
8256->9257
9257->10258
10258->11259
10258->11260
9257->10261
9257->10262
00->1263
1263->2264
2264->3265
3265->4266
3265->4267
3265->4268
4268->5269
4268->5270
5270->6271
6271->7272
7272->8273
7272->8274
6271->7275
3265->4276
4276->5277
5277->6278
6278->7279
7279->8280
7279->8281
8281->9282
8281->9283
9283->10284
10284->11285
10284->11286
10284->11287
5277->6288
6288->7289
7289->8290
7289->8291
8291->9292
8291->9293
9293->10294
10294->11295
10294->11296
10294->11297
5277->6298
6298->7299
7299->8300
7299->8301
8301->9302
8301->9303
9303->10304
10304->11305
9303->10306
9303->10307
9303->10308
5277->6309
6309->7310
7310->8311
7310->8312
8312->9313
9313->10314
8312->9315
9315->10316
9315->10317
10317->11318
5277->6319
6319->7320
7320->8321
8321->9322
8321->9323
7320->8324
7320->8325
8325->9326
9326->10327
8325->9328
8325->9329
8325->9330
5277->6331
6331->7332
7332->8333
8333->9334
7332->8335
8335->9336
9336->10337
10337->11338
11338->12339
12339->13340
12339->13341
11338->12342
10337->11343
11343->12344
11343->12345
9336->10346
8335->9347
9347->10348
9347->10349
}
